temp_df_vt <- c()
for (v in c("aca","mca","pca")) {
# load values
temp_vals_t <- read.table(file = paste("S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/IMAGES/",i,"/VALS/",i,"_",v,"_",c,"_diff_vals_atlas.txt", sep=""), header = F)
D0_vals <- read.table(file = paste("S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/IMAGES/",i,"/VALS/",i,"_",v,"_",c,"_D0_vals_atlas.txt", sep=""), header = F)
D0_vals <- D0_vals$V1
D1_vals <- read.table(file = paste("S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/IMAGES/",i,"/VALS/",i,"_",v,"_",c,"_D1_vals_atlas.txt", sep=""), header = F)
D1_vals <- D1_vals$V1
# get rid of zeros (i.e. ROIs not included in this specific VT)
temp_vals <- temp_vals_t[temp_vals_t != 0]
D0_vals <- D0_vals[temp_vals_t != 0]
D1_vals <- D1_vals[temp_vals_t != 0]
# assign values to variable named (subject_censoredornot_vascularterritory)
assign(paste(i,c,v, sep="_"), temp_vals)
temp_var <- paste(i,c,v, sep="_")
assign(paste(i,c,v,"D0",sep="_"), D0_vals)
temp_D0 <- paste(i,c,v,"D0",sep="_")
assign(paste(i,c,v,"D1",sep="_"), D1_vals)
temp_D1 <- paste(i,c,v,"D1",sep="_")
# add respective columns to dataframe that represents one subject's vascular territory difference values using one censoring strategy
temp_df <- as.data.frame(get(temp_var))
temp_df$subject <- rep(i, length(get(temp_var)))
temp_df$`get(temp_var)` <- c()
temp_df$`get(temp_D0)` <- c()
temp_df$`get(temp_D1)` <- c()
# create columns for subject-specific info (age, etc)
temp_df$age <- rep(demogr[demogr$subject==i,3], length(get(temp_var)))
temp_df$gender <- rep(demogr[demogr$subject==i,4], length(get(temp_var)))
temp_df$FDmean <- rep(demogr[demogr$subject==i,5], length(get(temp_var)))
# create columns for other variables
temp_df$cens <- rep(c, length(get(temp_var)))
temp_df$vt <- rep(v, length(get(temp_var)))
temp_df$diffvals <- get(temp_var)
temp_df$D0 <- get(temp_D0)
temp_df$D1 <- get(temp_D1)
temp_df$study <- NA
temp_df$type <- NA
temp_df$int <- NA
temp_df$tr <- NA
temp_df$length <- NA
temp_df$field <- NA
# create dataframe of one subject's difference values using one censoring strategy for ALL vascular territories
temp_df_vt <- rbind(temp_df_vt, temp_df)
}
# create dataframe of one subject's difference values using ALL censoring strategies for ALL vascular territories
temp_df_cens <- rbind(temp_df_cens, temp_df_vt)
# assign subject to a study and create corresponding columns (with parameters, interval, etc)
if (is.element(i, tbi)) {
temp_df_cens$study <- rep("tbi", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(90, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(2, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(300, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, eegnf)) {
temp_df_cens$study <- rep("eegnf", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(0.02, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(2, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(300, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, yale)) {
temp_df_cens$study <- rep("yale", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(7, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(1, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(360, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, modaf)) {
temp_df_cens$study <- rep("modaf", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(0.25, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(1.671, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(240, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, mpi)) {
temp_df_cens$study <- rep("mpi", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(7, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(3, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(900, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(7, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, msc)) {
temp_df_cens$study <- rep("msc", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(1, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(2.2, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(1800, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, csb_h)) {
temp_df_cens$study <- rep("csb_h", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("healthy", nrow(temp_df_cens))
temp_df_cens$int <- rep(1, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(0.4, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(340, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
if (is.element(i, csb_s)) {
temp_df_cens$study <- rep("csb_s", nrow(temp_df_cens)) # NAME OF STUDY
temp_df_cens$type <- rep("stroke", nrow(temp_df_cens))
temp_df_cens$int <- rep(1, nrow(temp_df_cens)) # INTERVAL BETWEEN SCANS IN DAYS
temp_df_cens$tr <- rep(0.4, nrow(temp_df_cens)) # REPETITION TIME IN SECONDS
temp_df_cens$length <- rep(340, nrow(temp_df_cens)) # SCAN LENGTH IN SECONDS
temp_df_cens$field <- rep(3, nrow(temp_df_cens)) # FIELD STRENGTH IN TESLA
}
}
# create dataframe of ALL subjects' difference values using ALL censoring strategies for ALL vascular territories
temp_df_subs <- rbind(temp_df_subs, temp_df_cens)
# write dataframe to CSV file
write.csv(temp_df_subs, "S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/temp_df_subs.csv")
}} else {
# load in prepepared data
temp_df_subs <- read.csv("S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/temp_df_subs.csv")
demogr <- read.csv2(file = paste("S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/demographics.csv", sep=";"), header = T)
}
# get descriptive statistics (by study) - see https://thatdatatho.com/2018/08/20/easily-create-descriptive-summary-statistic-tables-r-studio/
dataset_names = c("CSB", "LOBI", "NF", "Modafinil", "MPI", "MSC", "TBI", "Yale")
demogr$FD_mean <- as.numeric(as.character(demogr$FD_mean))
attr(demogr$age, "label") <- "Age (years)"
attr(demogr$gender, "label") <- "Gender"
attr(demogr$FD_mean, "label") <- "Mean FD (mm)"
levels(temp_df_subs$gender)[levels(temp_df_subs$gender)=="m"] <- "Male"
levels(temp_df_subs$gender)[levels(temp_df_subs$gender)=="f"] <- "Female"
temp_df_subs$field <- as.factor(temp_df_subs$field)
table_control <- tableby.control(test = F, total = T, numeric.simplify = T, numeric.stats = c("medianq1q3", "Nmiss2"), cat.stats = c("countpct","Nmiss2"), stats.labels = list(medianq1q3="Median (Q1,Q3)", Nmiss2 = "Missing"), digits = 2)
summary(tableby(study ~  age + gender + FD_mean, data = demogr, control = table_control))
# SET FONT SIZE FOR PLOT TEXT
op <- par(cex = 1.2)
plot_text <- 10
# plot distributions of diffvals by different variables
# VT
plot_vt <- ggplot(temp_df_subs, aes(diffvals, color=vt)) +
stat_density(geom="line", position = "identity", size = 1) +
theme_classic(base_size = plot_text) + xlab("Absolute differences (s)") + ylab("Density") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
scale_color_brewer("Vascular territory", type = "qual", palette = "Set2", labels = c("ACA","MCA","PCA"))
# TYPE
plot_type <- ggplot(temp_df_subs, aes(diffvals, color=type)) +
stat_density(geom="line", position = "identity", size = 1) +
theme_classic(base_size = plot_text) + xlab("Absolute differences (s)") + ylab("Density") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
scale_color_brewer("Group", type = "qual", palette = "Set2", labels = c("Healthy","Stroke"))
# MAGNETIC FIELD STRENGTH
plot_tesla <- ggplot(temp_df_subs, aes(diffvals, color=field)) +
stat_density(geom="line", position = "identity", size = 1) +
theme_classic(base_size = plot_text) + xlab("Absolute differences (s)") + ylab("Density") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
scale_color_brewer("Field strength", type = "qual", palette = "Set2", labels = c("3T","7T"))
# CENSORING STRATEGY
plot_cens <- ggplot(temp_df_subs, aes(diffvals, color=cens)) +
stat_density(geom="line", position = "identity", size = 1) +
theme_classic(base_size = plot_text) + xlab("Absolute differences (s)") + ylab("Density") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
scale_color_brewer("Motion censoring", type = "qual", palette = "Set2", labels = c("Yes","No"))
# GENDER
plot_gender <- ggplot(temp_df_subs, aes(diffvals, color=gender)) +
stat_density(geom="line", position = "identity", size = 1) +
theme_classic(base_size = plot_text) + xlab("Absolute differences (s)") + ylab("Density") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
scale_color_brewer("Gender", type = "qual", palette = "Set2")
# AGE
plot_age <- ggplot(temp_df_subs, aes(x=age, y=diffvals) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("Age (years)") +
ylab("Abs. differences (s)") +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm")) +
raincloud_theme
# SET COLOR FOR RAINCLOUD PLOTS
rc_plot_col = "dodgerblue"
#STUDY
plot_study <- ggplot(data = temp_df_subs, aes(y = diffvals, x = as.factor(study), fill = as.factor(study))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y = diffvals, color = as.factor(study)), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
ylab("Abs. differences (s)") +
xlab("Dataset") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
scale_x_discrete(labels=dataset_names) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0,0.3,0.8),"cm")) +
raincloud_theme
# INTERVAL
plot_int <- ggplot(data = temp_df_subs, aes(y = diffvals, x = as.factor(int), fill = as.factor(int))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, fill = rc_plot_col) +
geom_point(aes(y = diffvals, color = as.factor(int)), position = position_jitter(width = .15), size = .5, alpha = 0.8, colour = "gray52") +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5, fill = rc_plot_col) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
ylab("Abs. differences (s)") +
xlab("Interval between scans (days)") +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
raincloud_theme
# TR
plot_tr <- ggplot(data = temp_df_subs, aes(y = diffvals, x = as.factor(tr), fill = as.factor(tr))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, fill = rc_plot_col) +
geom_point(aes(y = diffvals, color = as.factor(tr)), position = position_jitter(width = .15), size = .5, alpha = 0.8, colour = "gray52") +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5, fill = rc_plot_col) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
ylab("Abs. differences (s)") +
xlab("Repetition time (s)") +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
raincloud_theme
# SCAN LENGTH
plot_length <- ggplot(data = temp_df_subs, aes(y = diffvals, x = as.factor(length), fill = as.factor(length))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, fill = rc_plot_col) +
geom_point(aes(y = diffvals), position = position_jitter(width = .15), size = .5, alpha = 0.6, colour = "gray52") +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5, fill = rc_plot_col) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
ylab("Abs. differences (s)") +
xlab("Scan length (s)") +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
raincloud_theme
# FD MEAN
plot_FDmean <- ggplot(temp_df_subs, aes(x=FDmean, y=diffvals) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("Mean framewise displacement (mm)") +
ylab("Abs. differences (s)") +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
raincloud_theme
# plot all
png("Figure3.png", width = 12, height =18, units = "cm", res = 300)
plot_grid(plot_age, plot_gender, plot_study, ncol = 1, labels = "AUTO")
dev.off()
png("Figure4.png", width = 19, height = 21, units = "cm", res = 300)
plot_grid(plot_type, plot_vt, plot_tesla, plot_cens, plot_int, plot_tr, plot_length, plot_FDmean, ncol = 2, labels = "AUTO")
dev.off()
# plot demographics
# get colors used (necessary to skip modafinil in age demo plot)
dataset_colors <- RColorBrewer::brewer.pal(8,"Dark2")
# plot age by study
plot_d_age <- ggplot(temp_df_subs, aes(x=study, y=age, fill=study)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=FALSE) +
scale_x_discrete(labels=dataset_names) +
scale_fill_manual(values = dataset_colors[c(1,2,3,5,6,7,8)]) +
theme(legend.position = "none") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm")) +
ylab("Age (years)") +
xlab("Dataset")
# plot FD mean by study
plot_d_FDmean <- ggplot(temp_df_subs, aes(x=study, y=FDmean, fill=study)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=FALSE) +
scale_x_discrete(labels=dataset_names) +
scale_fill_brewer(palette = "Dark2") +
theme(legend.position = "none") +
theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm"), axis.title = element_text(size=12)) +
ylab("Mean framewise displacement (mm)") +
xlab("Dataset")
# plot gender by study
demogr_temp <- demogr
demogr_temp$study <- revalue(demogr_temp$study, c("csb_h" = "CSB", "csb_s" = "LOBI", "modaf" = "Modafinil", "mpi" = "MPI", "msc" = "MSC", "eegnf" = "NF", "tbi" = "TBI", "yale" = "Yale"))
demogr_temp$gender <- revalue(demogr_temp$gender, c("m" = "Male", "f" = "Female"))
plot_d_gender <- ggplot(data = demogr_temp) + geom_mosaic(aes(x=product(gender,study), fill = gender)) + labs(x = "Dataset", y = "")  + scale_y_continuous(limits = c(0,1), labels = c(0,0.2,0.4,0.6,0.8,1), breaks = c(0,0.2,0.4,0.6,0.8,1)) + scale_fill_manual(name = "",values = c("#66c2a5","#fc8d62")) + theme(legend.position = "top") + theme(plot.margin=unit(c(0.3,0.3,0.3,1),"cm"))
# plot all
png("Figure2.png", width = 14, height = 21, units = "cm", res = 300)
plot_grid(plot_d_age, plot_d_gender, plot_d_FDmean, ncol = 1, labels = "AUTO")
dev.off()
# plot BOLD delay values
# aca
# stroke
# censored
aca_str_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="aca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
aca_str_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="aca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# healthy
# censored
aca_hea_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="aca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
aca_hea_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="aca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# mca
mca_str_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="mca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
mca_str_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="mca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# healthy
# censored
mca_hea_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="mca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
mca_hea_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="mca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# pca
pca_str_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
pca_str_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="stroke" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
ylim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# healthy
# censored
pca_hea_cens <- ggplot(temp_df_subs[temp_df_subs$cens=="cens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# non-censored
pca_hea_nocens <- ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
# plot all
png("SuppFig1.png", width = 21, height = 14, units = "cm", res = 300)
plot_grid(aca_hea_nocens,mca_hea_nocens,pca_hea_nocens,aca_str_nocens,mca_str_nocens,pca_str_nocens, ncol = 3, labels = "AUTO")
dev.off()
# calculate ICC
library(irr)
icc_pca_all <- c()
icc_aca_all <- c()
icc_mca_all <- c()
for (s in unique(temp_df_subs$subject)) {
d0_pca <- temp_df_subs$D0[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="pca"]
d1_pca <- temp_df_subs$D1[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="pca"]
icc_pca <- icc(cbind(d0_pca,d1_pca), model = "twoway", type = "agreement")
icc_pca_all <- c(icc_pca_all, icc_pca$value)
d0_aca <- temp_df_subs$D0[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="aca"]
d1_aca <- temp_df_subs$D1[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="aca"]
icc_aca <- icc(cbind(d0_pca,d1_aca), model = "twoway", type = "agreement")
icc_aca_all <- c(icc_aca_all, icc_aca$value)
d0_mca <- temp_df_subs$D0[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="mca"]
d1_mca <- temp_df_subs$D1[temp_df_subs$subject==s & temp_df_subs$cens=="nocens" & temp_df_subs$vt=="mca"]
icc_mca <- icc(cbind(d0_mca,d1_mca), model = "twoway", type = "agreement")
icc_mca_all <- c(icc_mca_all, icc_mca$value)
}
# rearrange levels
temp_df_subs$vt <- factor(temp_df_subs$vt, levels(temp_df_subs$vt)[c(2,3,1)])
temp_df_subs$cens <- factor(temp_df_subs$cens, levels(temp_df_subs$cens)[c(2,1)])
# build mixed model - linear mixed model (NB: predictors scaled)
model1 <- lmer(diffvals ~ vt + type + FDmean + tr + I(int/10) + I(length/600) + cens + (1|subject) + (1|study), data = temp_df_subs)
# test assumptions of mixed model (see https://ademos.people.uic.edu/Chapter18.html)
#1 LINEARITY
plot(resid(model1),temp_df_subs$diffvals)
#2 HOMOGENEITY OF VARIANCE
temp_df_subs$model1.res <- residuals(model1) #extracts the residuals and places them in a new column in our original data table
temp_df_subs$model1.res.abs <-abs(temp_df_subs$model1.res) #creates a new column with the absolute value of the residuals
temp_df_subs$model1.res2 <- temp_df_subs$model1.res.abs^2 #squares the absolute values of the residuals to provide the more robust estimate
levene.model1 <- lm(temp_df_subs$model1.res2 ~ subject, data=temp_df_subs) #ANOVA of the squared residuals
anova(levene.model1) #displays the results
plot(model1) # plots the result
#3 normality of residuals
qqmath(model1)
# build mixed model - Penalized quasi-likelihood (NB: predictors scaled)
model3 <- glmmPQL(diffvals ~ vt + type + FDmean + tr + field + I(int/10) + I(length/600) + cens, random=list(study = ~1, subject = ~1), family = gaussian(link="log"), data = temp_df_subs, verbose = FALSE)
summary(model3)
str(temp_df_subs)
temp_df_subs$age
temp_df_subs_diff <- abs(temp_df_subs$D1-temp_df_subs$D0)
plot(temp_df_subs_diff, temp_df_subs$diffvals)
ccor.test(temp_df_subs_diff, temp_df_subs$diffvals)
cor.test(temp_df_subs_diff, temp_df_subs$diffvals)
temp_df_subs$diffvals
ccor.test(temp_df_subs_diff, temp_df_subs$diffvals)
plot(temp_df_subs_diff, temp_df_subs$diffvals)
ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none") + geom_abline(1,0)
ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() + geom_abline(1,0) +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
ggplot(temp_df_subs[temp_df_subs$cens=="nocens" & temp_df_subs$type=="healthy" & temp_df_subs$vt=="pca",], aes(x=D0, y=D1) ) +
geom_hex(bins = 32) + scale_fill_gradient(low = "#fed976", high = "#800026", trans = "log10") +
xlab("BOLD delay day 0 (s)") +
ylab("BOLD delay day 1 (s)") +
xlim(-20,20) +
theme_bw() + geom_abline(slope=1,intercept=0) +
theme(plot.margin=unit(c(0.3,0.5,0.3,1),"cm"),legend.position = "none")
icc_mca_all
boxplot(icc_aca_all, icc_mca_all, icc_pca_all)
dotplot(icc_aca_all, icc_mca_all, icc_pca_all)
dotplot(icc_aca_all)
cbind(d0_pca,d1_aca)
str(temp_df_subs)
model4 <- glmmPQL(diffvals ~ tr + cens, random=list(study = ~1, subject = ~1), family = gaussian(link="log"), data = temp_df_subs, verbose = FALSE)
summary(model4)
model4 <- glmmPQL(diffvals ~ factor(tr) + cens, random=list(study = ~1, subject = ~1), family = gaussian(link="log"), data = temp_df_subs, verbose = FALSE)
summary(model4)
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/fd_binarize.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
plot(pca_d0_nocens, col = "#1b9e77", lwd = line_width, xlab = x_label, main = "Session 1", cex.lab=font_size, cex.axis=font_size, cex.main=font_size, ylim = y_limits, xlim = x_limits)
lines(mca_d0_nocens, col = "#d95f02", lwd = line_width)
lines(aca_d0_nocens, col = "#7570b3", lwd = line_width)
density(pca_d0_nocens)
plot(density(pca_d0_nocens), col = "#1b9e77", lwd = line_width, xlab = x_label, main = "Session 1", cex.lab=font_size, cex.axis=font_size, cex.main=font_size, ylim = y_limits, xlim = x_limits)
lines(density(mca_d0_nocens), col = "#d95f02", lwd = line_width)
lines(density(aca_d0_nocens), col = "#7570b3", lwd = line_width)
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
plot(density(pca_d0_nocens), col = "#1b9e77", lwd = line_width, xlab = x_label, main = "Session 1", cex.lab=font_size, cex.axis=font_size, cex.main=font_size, ylim = y_limits, xlim = x_limits)
lines(density(aca_d0_nocens), col = "#7570b3", lwd = line_width)
lines(density(mca_d0_nocens), col = "#7570b3", lwd = line_width)
window()
plot.new()
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/7_plot_BD_vals_2.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/7_plot_BD_vals_2.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/7_plot_BD_vals_2.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/7_plot_BD_vals_2.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/7_plot_BD_vals_2.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
source('S:/AG/AG-CSB_NeuroRad2/khalila/PROJECTS/BD_REPRO/ANALYSIS/6_plot_BD_vals.R')
